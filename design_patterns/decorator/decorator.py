"""Шаблон проектирования декоратора — это структурный шаблон проектирования, который позволяет добавлять поведение к отдельному объекту статически или динамически, не влияя на поведение других объектов того же класса. Это гибкая альтернатива подклассам для расширения функциональности.

Вот несколько примеров шаблона проектирования декоратора:

1. Добавление начинки к пицце. В этом примере пицца является базовым объектом, и к ней можно добавить начинки, такие как сыр, пепперони и грибы. Каждая начинка — это декоратор, добавляющий дополнительное поведение объекту пиццы.

2. Добавление границ к изображению. В этом примере изображение является базовым объектом, и для добавления к нему границ, рамок и других визуальных эффектов можно использовать декораторы. Каждый декоратор изменяет внешний вид изображения без изменения его основных свойств.

3. Добавление фильтров в приложение камеры. В этом примере приложение камеры является базовым объектом, а декораторы можно использовать для добавления фильтров, таких как сепия, черно-белые и винтажные эффекты, к фотографиям, сделанным с помощью приложения. Каждый декоратор фильтра изменяет внешний вид фотографии, не затрагивая ее исходное содержимое.

В целом, шаблон проектирования декоратора предоставляет способ добавления новых функций к объекту, сохраняя при этом его первоначальную структуру."""



# Define the base object
class Pizza:
    def __init__(self):
        self.description = "Plain pizza"
    
    def get_cost(self):
        return 10.00
    
    def get_description(self):
        return self.description

# Define the decorator objects
class Cheese(Pizza):
    def __init__(self, pizza):
        self.pizza = pizza
        self.description = pizza.get_description() + ", with cheese"
    
    def get_cost(self):
        return self.pizza.get_cost() + 1.50
    
class Pepperoni(Pizza):
    def __init__(self, pizza):
        self.pizza = pizza
        self.description = pizza.get_description() + ", with pepperoni"
    
    def get_cost(self):
        return self.pizza.get_cost() + 2.00

# Create a plain pizza object
pizza = Pizza()

# Add decorators to the pizza object
pizza = Cheese(pizza)
pizza = Pepperoni(pizza)

# Print the final description and cost of the pizza
print(pizza.get_description())
print("Cost: $", pizza.get_cost())


"""В этом примере мы определяем базовый объект «Пицца» и два объекта-декоратора «Сыр» и «Пепперони». 
Декораторы «Сыр» и «Пепперони» добавляют дополнительное поведение объекту «Пицца», изменяя его описание и стоимость. 
Мы создаем простой объект пиццы и добавляем к нему декораторы Cheese и Pepperoni, используя цепочку методов. 
Наконец, мы печатаем окончательное описание и стоимость украшенной пиццы."""