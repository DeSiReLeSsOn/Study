"""Объектный пул (Pool objects) в Python - это объект, который позволяет выполнять асинхронные задачи в потоках. 
Он предоставляет методы для запуска задач в потоках и получения результатов. 
Pool objects также может быть использован для балансировки нагрузки между потоками.
Объединение объектов в пул может обеспечить значительный прирост производительности; он наиболее эффективен в ситуациях, когда стоимость инициализации экземпляра класса высока, скорость создания экземпляра класса высока, а количество экземпляров, используемых в любой момент времени, невелико.

Пулы объектов (иначе называемые пулами ресурсов) используются для управления кэшированием объектов. 
Клиент, имеющий доступ к пулу объектов, может избежать создания новых объектов, 
просто запросив у пула уже созданный экземпляр. Как правило, пул будет растущим пулом, т.е. 
пул сам будет создавать новые объекты, если пул пуст, 
или у нас может быть пул, который ограничивает количество создаваемых объектов.
"""


class ReusablePool:
    """
    Класс, который создает экземпляры Reusable и раздает их
    """

    def __init__(self, size):
        """
        Создаем экземляров в количестве size
        """
        self._reusables = [Reusable() for _ in range(size)]

    def acquire(self):
        """
        Отдаем экземпляр и удаляем его из списка свободных
        """
        return self._reusables.pop()

    def release(self, reusable):
        """
        Возвращаем экземпляр обратно в пул
        """
        self._reusables.append(reusable)


class Reusable:
    """
    Класс который делает, что-то долгое, требующее много ресурсов
    """

    pass


def main():
    reusable_pool = ReusablePool(10)
    reusable = reusable_pool.acquire()
    reusable_pool.release(reusable)


if __name__ == "__main__":
    main()