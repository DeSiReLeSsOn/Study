"""Наследование в объектно-ориентированном программировании очень похоже на наследование в реальной жизни,
где ребенок наследует те или иные характеристики его родителей в дополнение к его собственным характеристикам.

В объектно-ориентированном программировании, наследование означает отношение IS-A. Например, болид — это транспорт.
Наследование это одна из самых удивительных концепций объектно-ориентированного программирования,
так как оно подразумевает повторное использование.

Основная идея наследования в объектно-ориентированном программировании заключается в том,
что класс может наследовать характеристики другого класса.
Класс, который наследует другой класс, называется дочерним классом или производным классом, и класс, который дает наследие,
называется родительским, или основным.""" 

# Создание класса Vehicle
class Vehicle:  
    def vehicle_method(self):
        print("Это родительский метод из класса Vehicle")

# Создание класса Car, который наследует Vehicle
class Car(Vehicle):  
    def car_method(self):
        print("Это метод из дочернего класса") 


"""Vehicle и Car, который наследует класс Vehicle.
Чтобы наследовать класс, вам нужно только вписать название родительского класса внутри скобок, которая следует за названием дочернего класса.
Класс Vehicle содержит метод vehicle_method(), а дочерний класс содержит метод car_method(). Однако, так как класс Car наследует класс Vehicle,
он также наследует и метод vehicle_method().""" 

car_a = Car()  
car_a.vehicle_method() # Вызываем метод родительского класса 


"""В Python, родительский класс может иметь несколько дочерних, и,
аналогично, дочерний класс может иметь несколько родительских классов""" 

# создаем класс Vehicle
class Vehicle:  
    def vehicle_method(self):
        print("Это родительский метод из класса Vehicle")

# создаем класс Car, который наследует Vehicle
class Car(Vehicle):  
    def car_method(self):
        print("Это дочерний метод из класса Car")

# создаем класс Cycle, который наследует Vehicle
class Cycle(Vehicle):  
    def cycleMethod(self):
        print("Это дочерний метод из класса Cycle") 


car_a = Car()  
car_a.vehicle_method() # вызов метода родительского класса
car_b = Cycle()  
car_b.vehicle_method() # вызов метода родительского класса 


"""В этом скрипте, родительский класс Vehicle наследуется двумя дочерними классами — Car и Cycle.
Оба дочерних класса будут иметь доступ к vehicle_method() родительского класса."""  

""" Таким же образом, дочерний класс может иметь несколько родительских.""" 

class Camera:  
    def camera_method(self):
        print("Это родительский метод из класса Camera")

class Radio:  
    def radio_method(self):
        print("Это родительский метод из класса Radio")

class CellPhone(Camera, Radio):  
     def cell_phone_method(self):
        print("Это дочерний метод из класса CellPhone") 

"""В скрипте выше мы создали три класса: Camera, Radio, и CellPhone. Классы Camera и Radio наследуются классом CellPhone.
Это значит, что класс CellPhone будет иметь доступ к методам классов Camera и Radio""" 