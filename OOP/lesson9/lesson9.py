"""Метакласс — это класс класса. Всякий раз, когда создается экземпляр класса (объекта), поведение объекта определяется классом. Метакласс определяет поведение самого класса. Использование метакласса в Python

Причина использования метаклассов заключается в том, что классы Python сами являются объектами.
Поскольку классы являются объектами, мы можем выполнять с ними различные операции, такие как присвоение их переменной, 
копирование и т.д. А поскольку они являются объектами, мы можем создавать их динамически, как и любой другой объект."""

print(type(123)) 
print(type([1, 2, 3])) 
class A(): 
    def __init__(self): 
        pass 
a = A() 
print(type(a))


"""Чтобы лучше понять концепцию метаклассов, мы сначала посмотрим, как Python определяет классы. 
Язык определяет все как объект, будь то int , string или что-то еще. 
Если вы помните, чтобы посмотреть на тип любого объекта Python, мы используем функцию type"""

print(type(type(123)))  # class 'type'
print(type(A)) # class 'type'


"""Как видите, тип ( class ) — это type класса! Получается, что класс определяется самим классом? Что это за явление? 
Это концепция метакласса, который служит для определения других классов. 
По сути, это фабрика классов, из которой могут быть определены другие классы, такие как int s и str s. type — это метакласс, 
который язык использует для создания объекта. 
(поэтому у каждого объекта есть тип) А поскольку type — это метакласс, мы можем создавать из него другие классы."""

"""Динамическое создание классов
Мы можем создавать классы динамически путем создания экземпляра
из конструктора type(name, bases, attr) : type(name, bases, attr) name -> имя класса базы -> классы, от которых наследуется новый класс attr -> словарь атрибутов + методы, содержащиеся в классе

name -> имя класса
базы -> классы, от которых наследуется новый класс
attr -> словарь атрибутов + методы, содержащиеся в классе"""

Animal = type('Animal',(), dict(__init__ = lambda self: None, worth = lambda self, value: value))

# Это то же самое, что:
class Animal(): 
    def __init__(self): 
        pass 
    def worth(self, value): 
        return value