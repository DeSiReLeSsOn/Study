from fastapi import FastAPI

app = FastAPI() 


# Пример пользовательских данных (для демонстрационных целей) 
fake_users = {
    1: {"username": "john_doe", "email": "john@example.com"},
    2: {"username": "jane_smith", "email": "jane@example.com"},
} 


# Конечная точка для получения информации о пользователе по ID
@app.get("/users/{user_id}")
def read_user(user_id: int):
    if user_id in fake_users:
        return fake_users[user_id] 
    return {"error": "User not found"} 

"""FastAPI также позволяет вам использовать параметры запроса для настройки поведения конечной точки. Например, вы можете изменить конечную точку `/users`, 
чтобы она принимала параметр запроса `limit` для получения ограниченного числа пользователей."""
@app.get("/users/")
def read_users(limit:int = 10):
    return dict(list(fake_users.items())[:limit])  
"""Поясним по махинациям. Мы из условного словаря `fake_users` сделали массив, обрезали его через слайсы и потом обернули обратно в словарь, 
чтобы вернулся ответ по формату JSON, который сейчас является негласным стандартом обмена данными через API. 
В реальных приложениях данные с высокой долей вероятности будут подтягивать из базы данных и форматировать согласно объявленным моделям, о чем мы расскажем позднее на курсе. 

С помощью этого изменения теперь вы можете получить доступ к конечной точке `/users` с параметром запроса, например: `http://localhost:8000/users/?limit=3`,
 чтобы получить первых трех пользователей."""