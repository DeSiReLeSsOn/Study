"""Ваша задача - создать конечную точку FastAPI, которая принимает POST-запрос с данными о пользователе/юзере в теле запроса. 
Пользовательские данные должны включать следующие поля:

- `name` (str): Имя пользователя (обязательно).
- `email` (str): адрес электронной почты пользователя (обязателен и должен иметь допустимый формат электронной почты).
- `age` (int): возраст пользователя (необязательно, но должно быть положительным целым числом, если указано).
- `is_subscribed` (bool): Флажок, указывающий, подписан ли пользователь на новостную рассылку (необязательно).

 

1. Определите Pydantic модель с именем `UserCreate` для представления данных о пользователе.
Применяйте соответствующие правила проверки, чтобы обеспечить правильность данных.

2. Создайте маршрут POST `/create_user`, который принимает данные JSON в соответствии с моделью `UserCreate`.

3. Реализуйте функцию для обработки входящих пользовательских данных и возврата ответа с 
полученной пользовательской информацией.

Пример:

Запрос JSON:

{
    "name": "Alice",
    "email": "alice@example.com",
    "age": 30,
    "is_subscribed": true
}
Ответ JSON:

{
    "name": "Alice",
    "email": "alice@example.com",
    "age": 30,
    "is_subscribed": true
}
Пожалуйста, протестируйте свою реализацию, используя такие инструменты, как "curl", Postman или любой другой клиент API,
чтобы отправить пользовательские данные и проверить ответ.""" 
from model import UserCreate 
from fastapi import FastAPI


app = FastAPI()
 

users = []

@app.post("/create_user", response_model=None)
def validate_data(new_user: UserCreate):
    users.append(new_user) 
    return new_user  


@app.get("/showuser")
async def show_users():
    return {"users": users} 




