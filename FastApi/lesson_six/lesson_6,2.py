"""
Cookie
(куки) — небольшой фрагмент данных, который отправляется сервером и хранится на компьютере пользователя. В cookie находится информация о вас.
Например, логин и пароль, местоположение, языковые настройки, сведения о товарах в корзине интернет-магазина.
Параметры Cookie
Вы можете задать параметры Cookie таким же способом, как Query и Path параметры.

FastAPI поддерживает три типа файлов cookie:

а) Обычные файлы cookie: Это стандартные файлы cookie, которые хранятся на стороне клиента и отправляются обратно на сервер при каждом запросе.
Обычные файлы cookie широко используются для различных целей, таких как управление сеансами и пользовательскими настройками.

б) Защищенные файлы cookie: Защищенные файлы cookie - это зашифрованные файлы cookie, которые обеспечивают дополнительный уровень безопасности.
Под защищенными куками мы имеем ввиду куки,
в которых установлен флаг Secure, который говорит браузеру, что эти куки можно передавать только по SSL-соединению.
c) Подписанные файлы cookie: Подписанные файлы cookie - это файлы cookie, которые содержат подпись для проверки их подлинности.
Они гарантируют, что данные cookie-файлов не были изменены клиентом с тех пор, как они были установлены сервером.""" 

from fastapi import FastAPI , Cookie,  Response, router 
import datetime 
app = FastAPI()



@app.get("/items/")
async def read_items(ads_id: str | None = Cookie(default=None)):
    return {"ads_id": ads_id} 

"""Доступ к файлам cookie
FastAPI упрощает доступ к файлам cookie в запросе.
Вы можете извлекать данные cookie и работать с ними в своих обработчиках маршрутов точно так же, как с любыми другими данными.

Для получения куки на сервере применяется класс fastapi.Cookie"""

@app.get("/")
def root(last_visit = Cookie()):
    return  {"last visit": last_visit} 
    #Обратите внимание, что название переменной в обработчике маршрута (в примере last_visit) соответствует ключу куков, которые должны совпадать. 



"""Установка файлов cookie
В FastAPI вы можете установить файлы cookie в ответе, используя метод `set_cookie` в параметре Response.
Этот метод позволяет вам определить имя файла cookie, значение и дополнительные параметры, такие как домен, путь, срок действия и параметры безопасности."""

@app.get("/")
def root(response: Response):
    now = datetime.now()    # получаем текущую дату и время
    response.set_cookie(key="last_visit", value=now)
    return  {"message": "куки установлены"} 


"""Прочие возможности при работе с cookie
Вы можете указать время истечения срока действия файла cookie, используя параметр "expires", 
или установить максимальный возраст, используя параметр "max_age". Это помогает контролировать срок службы файлов cookie и эффективно управлять данными сеанса.
FastAPI предоставляет простой способ удалить файлы cookie, установив время их истечения в прошлом. 
Это дает указание клиенту удалить файл cookie из своего хранилища.""" 

@router.post("/logout", status_code=204)
async def logout_user(response: Response):
    response.delete_cookie("example_access_token")



